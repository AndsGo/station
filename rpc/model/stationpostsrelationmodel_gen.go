// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stationPostsRelationFieldNames          = builder.RawFieldNames(&StationPostsRelation{})
	stationPostsRelationRows                = strings.Join(stationPostsRelationFieldNames, ",")
	stationPostsRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(stationPostsRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	stationPostsRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(stationPostsRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	stationPostsRelationModel interface {
		Insert(ctx context.Context, data *StationPostsRelation) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*StationPostsRelation, error)
		Update(ctx context.Context, data *StationPostsRelation) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultStationPostsRelationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StationPostsRelation struct {
		Id        uint64 `db:"id"`         // 主键
		StationId uint64 `db:"station_id"` // 站点id
		PostsId   uint64 `db:"posts_id"`   // 内容id
		WpId      uint64 `db:"wp_id"`      // wp id
	}
)

func newStationPostsRelationModel(conn sqlx.SqlConn) *defaultStationPostsRelationModel {
	return &defaultStationPostsRelationModel{
		conn:  conn,
		table: "`station_posts_relation`",
	}
}

func (m *defaultStationPostsRelationModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStationPostsRelationModel) FindOne(ctx context.Context, id uint64) (*StationPostsRelation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stationPostsRelationRows, m.table)
	var resp StationPostsRelation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStationPostsRelationModel) Insert(ctx context.Context, data *StationPostsRelation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, stationPostsRelationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.StationId, data.PostsId, data.WpId)
	return ret, err
}

func (m *defaultStationPostsRelationModel) Update(ctx context.Context, data *StationPostsRelation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stationPostsRelationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StationId, data.PostsId, data.WpId, data.Id)
	return err
}

func (m *defaultStationPostsRelationModel) tableName() string {
	return m.table
}
