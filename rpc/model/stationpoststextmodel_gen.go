// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stationPostsTextFieldNames          = builder.RawFieldNames(&StationPostsText{})
	stationPostsTextRows                = strings.Join(stationPostsTextFieldNames, ",")
	stationPostsTextRowsExpectAutoSet   = strings.Join(stringx.Remove(stationPostsTextFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	stationPostsTextRowsWithPlaceHolder = strings.Join(stringx.Remove(stationPostsTextFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	stationPostsTextModel interface {
		Insert(ctx context.Context, data *StationPostsText) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*StationPostsText, error)
		Update(ctx context.Context, data *StationPostsText) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultStationPostsTextModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StationPostsText struct {
		Id         uint64         `db:"id"`          // 主键
		PostsId    sql.NullInt64  `db:"posts_id"`    //  posts 主键
		Content    sql.NullString `db:"content"`     // html内容
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 修改时间
	}
)

func newStationPostsTextModel(conn sqlx.SqlConn) *defaultStationPostsTextModel {
	return &defaultStationPostsTextModel{
		conn:  conn,
		table: "`station_posts_text`",
	}
}

func (m *defaultStationPostsTextModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStationPostsTextModel) FindOne(ctx context.Context, id uint64) (*StationPostsText, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stationPostsTextRows, m.table)
	var resp StationPostsText
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStationPostsTextModel) Insert(ctx context.Context, data *StationPostsText) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, stationPostsTextRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PostsId, data.Content)
	return ret, err
}

func (m *defaultStationPostsTextModel) Update(ctx context.Context, data *StationPostsText) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stationPostsTextRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.PostsId, data.Content, data.Id)
	return err
}

func (m *defaultStationPostsTextModel) tableName() string {
	return m.table
}
