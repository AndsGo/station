// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stationUsersFieldNames          = builder.RawFieldNames(&StationUsers{})
	stationUsersRows                = strings.Join(stationUsersFieldNames, ",")
	stationUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(stationUsersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	stationUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(stationUsersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	stationUsersModel interface {
		Insert(ctx context.Context, data *StationUsers) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*StationUsers, error)
		FindOneBySlug(ctx context.Context, slug sql.NullString) (*StationUsers, error)
		FindOneByUsername(ctx context.Context, username sql.NullString) (*StationUsers, error)
		Update(ctx context.Context, data *StationUsers) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultStationUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StationUsers struct {
		Id         uint64         `db:"id"`          // 主键
		Name       sql.NullString `db:"name"`        // 姓名 页面显示
		Email      sql.NullString `db:"email"`       // 邮箱
		Slug       sql.NullString `db:"slug"`        // 用户标识符
		Username   sql.NullString `db:"username"`    // 登录名称
		Password   sql.NullString `db:"password"`    // 登录密码
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 修改时间
	}
)

func newStationUsersModel(conn sqlx.SqlConn) *defaultStationUsersModel {
	return &defaultStationUsersModel{
		conn:  conn,
		table: "`station_users`",
	}
}

func (m *defaultStationUsersModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStationUsersModel) FindOne(ctx context.Context, id uint64) (*StationUsers, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stationUsersRows, m.table)
	var resp StationUsers
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStationUsersModel) FindOneBySlug(ctx context.Context, slug sql.NullString) (*StationUsers, error) {
	var resp StationUsers
	query := fmt.Sprintf("select %s from %s where `slug` = ? limit 1", stationUsersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, slug)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStationUsersModel) FindOneByUsername(ctx context.Context, username sql.NullString) (*StationUsers, error) {
	var resp StationUsers
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", stationUsersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStationUsersModel) Insert(ctx context.Context, data *StationUsers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, stationUsersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Email, data.Slug, data.Username, data.Password)
	return ret, err
}

func (m *defaultStationUsersModel) Update(ctx context.Context, newData *StationUsers) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stationUsersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Email, newData.Slug, newData.Username, newData.Password, newData.Id)
	return err
}

func (m *defaultStationUsersModel) tableName() string {
	return m.table
}
