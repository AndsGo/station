// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"rpc/client/station"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	postsFieldNames          = builder.RawFieldNames(&Posts{})
	postsRows                = strings.Join(postsFieldNames, ",")
	postsRowsExpectAutoSet   = strings.Join(stringx.Remove(postsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	postsRowsWithPlaceHolder = strings.Join(stringx.Remove(postsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	postsModel interface {
		Insert(ctx context.Context, data *Posts) (sql.Result, error)
		AddPosts(ctx context.Context, data *Posts, text *PostsText) (int64, error)
		FindOne(ctx context.Context, id uint64) (*Posts, error)
		QueryPosts(ctx context.Context,in *station.PostsReq )([]*Posts,uint64,error)
		Update(ctx context.Context, data *Posts) error
		UpdatePosts(ctx context.Context, data *Posts, text *PostsText) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultPostsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Posts struct {
		Id         uint64         `db:"id"`
		Title      sql.NullString `db:"title"`      // 标题
		Source     sql.NullString `db:"source"`     // 来源
		Author     sql.NullInt64  `db:"author"`     // 作者
		ThrownNum  sql.NullInt64  `db:"thrown_num"` // 投放数量
		Categories sql.NullString `db:"categories"` // 分类
		Creater    sql.NullString `db:"creater"`    // 创建人
		CreateAt   time.Time      `db:"create_at"`  // 创建时间
		Modifier   sql.NullString `db:"modifier"`   // 修改人
		UpdateAt   time.Time      `db:"update_at"`  // 修改时间
	}
)

func newPostsModel(conn sqlx.SqlConn) *defaultPostsModel {
	return &defaultPostsModel{
		conn:  conn,
		table: "`posts`",
	}
}

func (m *defaultPostsModel) Delete(ctx context.Context, id uint64) error {	
	err := m.conn.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
        query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		_, err := session.ExecCtx(ctx, query, id)
        if err != nil {
            return err
        }
		query = fmt.Sprintf("delete from %s where `posts_id` = ?", "posts_text")
        _ ,err =session.ExecCtx(ctx, query, id )
        if err != nil {
            return err
        }
		return nil
    })
	if err!=nil {
		return err
	}
	return nil
}

func (m *defaultPostsModel) FindOne(ctx context.Context, id uint64) (*Posts, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postsRows, m.table)
	var resp Posts
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPostsModel) QueryPosts(ctx context.Context,data *station.PostsReq )([]*Posts,uint64,error){
	//构建查询条件
	query := "where 1=1"
	params :=make([]interface{},0,0)
	if data.Title!=""{ 
		query += " and title like ?"
		params = append(params,  "%"+data.Title+"%")
	}
	if data.Source!=""{ 
		query += " and source = ?"
		params = append(params,  data.Source)
	}
	if data.Author!=0{ 
		query += " and author = ?"
		params = append(params,  data.Author)
	}
	if data.Categories!=""{ 
		query += " and categories = ?"
		params = append(params,  data.Categories)
	}
	if data.CreateTime!=""{ 
		query += " and create_at >= ? and create_at < ?"
		params = append(params,  fmt.Sprintf("%v 00:00:00",data.CreateTime))
		params = append(params,  fmt.Sprintf("%v 23:59:59:999",data.CreateTime))
	}
	//查数量
	total := 0
	items := make([]*Posts, 0)
	err := m.conn.QueryRow(&total,fmt.Sprintf("select count(1) from %s ", m.table) + query, params...)
	if err!=nil {
		return nil,0, err
	}
	// 没有记录
	if total == 0 {
		return items, uint64(total), nil
	}
	//分页
	query += "  order by id desc LIMIT ? OFFSET ?"
	params = append(params, data.PageInfo.PageSize)
	params = append(params, data.PageInfo.PageSize*(data.PageInfo.Page-1))
	err = m.conn.QueryRows(&items, fmt.Sprintf("select %s from %s", postsRows, m.table) + query, params...)
	if err!=nil {
		return nil,0, err
	}
	return items,uint64(total),nil
}

func (m *defaultPostsModel) Insert(ctx context.Context, data *Posts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, postsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Source, data.Author, data.ThrownNum, data.Categories, data.Creater, data.Modifier)
	return ret, err
}

// 新增Posts 和PostsText
func (m *defaultPostsModel) AddPosts(ctx context.Context, data *Posts, text *PostsText) (int64,error){
	var id int64
	err := m.conn.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
        query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, postsRowsExpectAutoSet)
		r, err := session.ExecCtx(ctx, query, data.Title, data.Source, data.Author, data.ThrownNum, data.Categories,data.Creater,data.Modifier)
        if err != nil {
            return err
        }
		id ,err = r.LastInsertId()
		if err != nil {
            return err
        }
		query = fmt.Sprintf("insert into %s (%s) values (?, ?)", "posts_text", postsTextRowsExpectAutoSet)
        _ ,err =session.ExecCtx(ctx, query, id , text.Content)
        if err != nil {
            return err
        }
		return nil
    })
	if err!=nil {
		return id,err
	}
	return id,nil
}

// 事务更新
func (m *defaultPostsModel) UpdatePosts(ctx context.Context, data *Posts, text *PostsText) error {
	err := m.conn.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
        query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, postsRowsWithPlaceHolder)
		_, err := session.ExecCtx(ctx, query, data.Title, data.Source, data.Author, data.ThrownNum, data.Categories, data.Creater, data.Modifier, data.Id)
        if err != nil {
            return err
        }
		query = fmt.Sprintf("update %s set %s where `posts_id` = ?","posts_text", postsTextRowsWithPlaceHolder)
        _ ,err =session.ExecCtx(ctx, query, text.PostsId, text.Content, text.PostsId)
        if err != nil {
            return err
        }
		return nil
    }) 
	if err!=nil {
		return err
	}
	return nil
}

func (m *defaultPostsModel) Update(ctx context.Context, data *Posts) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, postsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Source, data.Author, data.ThrownNum, data.Categories, data.Creater, data.Modifier, data.Id)
	return err
}

func (m *defaultPostsModel) tableName() string {
	return m.table
}
