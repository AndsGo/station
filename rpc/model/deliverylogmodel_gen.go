// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	deliveryLogFieldNames          = builder.RawFieldNames(&DeliveryLog{})
	deliveryLogRows                = strings.Join(deliveryLogFieldNames, ",")
	deliveryLogRowsExpectAutoSet   = strings.Join(stringx.Remove(deliveryLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	deliveryLogRowsWithPlaceHolder = strings.Join(stringx.Remove(deliveryLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	deliveryLogModel interface {
		Insert(ctx context.Context, data *DeliveryLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*DeliveryLog, error)
		FindOneByPostsIdStationId(ctx context.Context, postsId sql.NullInt64, stationId sql.NullInt64) (*DeliveryLog, error)
		Update(ctx context.Context, data *DeliveryLog) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultDeliveryLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DeliveryLog struct {
		Id           uint64         `db:"id"`            // 主键
		Title        sql.NullString `db:"title"`         // 标题
		Source       sql.NullString `db:"source"`        // 来源
		DomainName   sql.NullString `db:"domain_name"`   // 域名
		DeliveryDate sql.NullTime   `db:"delivery_date"` // 投放日期
		Author       sql.NullInt64  `db:"author"`        // 作者
		Deliverer    sql.NullString `db:"deliverer"`     // 投放人
		Status       sql.NullInt64  `db:"status"`        // 投放状态 0待投放 1已投放 2 投放失败
		Result       sql.NullString `db:"result"`        // 投放执行结果
		CreateTime   time.Time      `db:"create_time"`   // 创建时间
		UpdateTime   time.Time      `db:"update_time"`   // 修改时间
		PostsId      sql.NullInt64  `db:"posts_id"`      // 文章id
		StationId    sql.NullInt64  `db:"station_id"`    // 站点id
		WpCateIds    sql.NullString `db:"wp_cate_ids"`   // wp分类
	}
)

func newDeliveryLogModel(conn sqlx.SqlConn) *defaultDeliveryLogModel {
	return &defaultDeliveryLogModel{
		conn:  conn,
		table: "`delivery_log`",
	}
}

func (m *defaultDeliveryLogModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDeliveryLogModel) FindOne(ctx context.Context, id uint64) (*DeliveryLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deliveryLogRows, m.table)
	var resp DeliveryLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeliveryLogModel) FindOneByPostsIdStationId(ctx context.Context, postsId sql.NullInt64, stationId sql.NullInt64) (*DeliveryLog, error) {
	var resp DeliveryLog
	query := fmt.Sprintf("select %s from %s where `posts_id` = ? and `station_id` = ? limit 1", deliveryLogRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, postsId, stationId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeliveryLogModel) Insert(ctx context.Context, data *DeliveryLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, deliveryLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Source, data.DomainName, data.DeliveryDate, data.Author, data.Deliverer, data.Status, data.Result, data.PostsId, data.StationId, data.WpCateIds)
	return ret, err
}

func (m *defaultDeliveryLogModel) Update(ctx context.Context, newData *DeliveryLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, deliveryLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Title, newData.Source, newData.DomainName, newData.DeliveryDate, newData.Author, newData.Deliverer, newData.Status, newData.Result, newData.PostsId, newData.StationId, newData.WpCateIds, newData.Id)
	return err
}

func (m *defaultDeliveryLogModel) tableName() string {
	return m.table
}
