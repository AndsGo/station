// Code generated by goctl. DO NOT EDIT.
// Source: station.proto

package greet

import (
	"context"

	"rpc/example/proto/greet"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	SayHelloReq  = greet.SayHelloReq
	SayHelloResp = greet.SayHelloResp

	Greet interface {
		// 定义一个 SayHello 一元 rpc 方法，请求体和响应体必填。
		SayHello(ctx context.Context, in *SayHelloReq, opts ...grpc.CallOption) (*SayHelloResp, error)
	}

	defaultGreet struct {
		cli zrpc.Client
	}
)

func NewGreet(cli zrpc.Client) Greet {
	return &defaultGreet{
		cli: cli,
	}
}

// 定义一个 SayHello 一元 rpc 方法，请求体和响应体必填。
func (m *defaultGreet) SayHello(ctx context.Context, in *SayHelloReq, opts ...grpc.CallOption) (*SayHelloResp, error) {
	client := greet.NewGreetClient(m.cli.Conn())
	return client.SayHello(ctx, in, opts...)
}
